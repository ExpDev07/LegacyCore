using CitizenFX.Core;
using CitizenFX.Core.Native;
using System;
using System.Collections.Generic;
using LegacyCore.Server.Command;
using LegacyCore.Server.Chat;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LegacyCore.Server.Entity {

    /// <summary>
    /// A player on legacy
    /// </summary>
    public class LegacyPlayer : ICommandSender {

        /// <summary>
        /// A very unique id generated by LegacyCore
        /// </summary>
        [Key]
        public string Id { get; set; }

        /// <summary>
        /// Player's unique steam id
        /// </summary>
        [MaxLength(17)]
        public string SteamId { get; set; }

        /// <summary>
        /// Time player was created
        /// </summary>
        public DateTime Created { get; set; }

        /// <summary>
        /// Player's current network id. Do not map/save
        /// </summary>
        [NotMapped]
        public int NetworkId { get; set; }

        /// <summary>
        /// Player's steam name. Do not map/save
        /// </summary>
        [NotMapped]
        public string Name => this.GetCitizenPlayer().Name;

        /// <summary>
        /// Player's permission level
        /// </summary>
        public int PermissionLevel { get; set; }

        /// <summary>
        /// Constructs a legacy player
        /// </summary>
        /// <param name="id">Steam id of player</param>
        public LegacyPlayer(string steamId) {
            this.Id = steamId; // just use steam id
            this.SteamId = steamId;
            this.Created = DateTime.UtcNow;
        }

        /// <summary>
        /// A parameter-less constructor used by MySQL
        /// </summary>
        public LegacyPlayer() { }

        /// <summary>
        /// Gets Citizen's representation of player
        /// </summary>
        /// <returns>CitizenX's player</returns>
        public Player GetCitizenPlayer() {
            // Find player in list
            Player player = new PlayerList()[this.NetworkId];

            // Never is null, so make sure it's a player by checking ping
            if (player.Ping == 0) return null;
            else return player;
        }

        /// <summary>
        /// Checks whether the player is online
        /// </summary>
        /// <returns>True if player is online</returns>
        public bool IsOnline() {
            return !(GetCitizenPlayer() is null);
        }

        /// <summary>
        /// Gets player's name
        /// </summary>
        /// <returns>Name of player</returns>
        public string GetName() {
            return GetCitizenPlayer().Name;
        }

        /// <summary>
        /// Checks if player has permission level
        /// </summary>
        /// <param name="level">Level to check for</param>
        /// <returns>True if player has security clearence ;)</returns>
        public bool IsPermised(int level) {
            // True if player's level is higher or the same
            return this.PermissionLevel >= level;
        }

        /// <summary>
        /// Sends a message to player with specified prefix
        /// </summary>
        /// <param name="color">Color of prefix</param>
        /// <param name="prefix">Prefix of message</param>
        /// <param name="message">Message to send</param>
        public void SendMessage(int[] color, string prefix, string message) {
            Player player = this.GetCitizenPlayer();
            if (player == null) {
                return;
            } 
            player.TriggerEvent("chatMessage", prefix, color, new string[] { message });
        }

        /// <summary>
        /// Sends a message to player
        /// </summary>
        /// <param name="message">Message to send</param>
        public void SendMessage(string message) {
            this.SendMessage(ColorScheme.WHITE, "", message);
        }

        /// <summary>
        /// Kicks player with reason
        /// </summary>
        /// <param name="reason">Reason for kick</param>
        public void Kick(string reason) {
            GetCitizenPlayer().Drop(reason);
        }

        /// <summary>
        /// Kick player without a reason
        /// </summary>
        public void Kick() {
            this.Kick("You have been kicked from the server!");
        }

        /// <summary>
        /// Creates a formatted name using network id and steam name
        /// </summary>
        /// <returns>Formatted name</returns>
        public string GetFormattedName() {
            return Name + " | " + NetworkId;
        }
    }
}
